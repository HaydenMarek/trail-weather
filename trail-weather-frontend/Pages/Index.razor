@page "/"
@using trail_weather_frontend.Services
@using trail_weather_frontend.DTOs
@using System.IO
@using System.Text.Json
@inject IApiCaller _caller
@inject IGeolocationService _geolocationService
@inject HttpClient Http

<h3>TrailWeather</h3>

<div>
    <label for="rangeInput">Range (km):</label>
    <input type="text" id="rangeInput" @bind="@range" @onkeyup="HandleKeyUp">
    <button class="btn-primary" @onclick="GetTrailWeather">Get Weather</button>

    @if (position != null)
    {
        <span style="margin-left: 10px;">
            Your current location: Latitude: @position.Coords.Latitude, Longitude: @position.Coords.Longitude
        </span>
    }
    else 
    {
        <span style="margin-left: 10px;">
            Your current location is unknown. 
        </span>
    }
    Manual Search: <input type="text" id="manualSearch" @bind="@SearchQuery" @onkeyup="ManualSearch_HandleKeyUp" placeholder="Start typing..." />
</div>

@if (Suggestions.Any())
{
    <ul class="list-group">
        @foreach (var suggestion in Suggestions)
        {
            <li class="list-group-item" @onclick="() => SelectSuggestion(suggestion)">
                @suggestion.display_name
            </li>
        }
    </ul>
}

@if (!string.IsNullOrEmpty(SelectedAddress))
{
    <p><strong>Selected Address:</strong> @SelectedAddress</p>
    <p><strong>Latitude:</strong> @Latitude</p>
    <p><strong>Longitude:</strong> @Longitude</p>
}

@if (forecasts != null)
{
    if (forecasts.Count == 0)
        return;    

    <table class="table">
        <thead>
            <tr>
                <th>Bikepark Name</th>
                <th>Distance to (km)</th>
                @foreach (var time in forecasts[0].DailyData.TimeList)
                {
                    @if(DateTime.Now.Date != DateTime.Parse(@time).Date)
                    {
                        <th>@DateTime.Parse(@time).DayOfWeek.ToString().Substring(0, 3)</th>                        
                    }
                    else
                    {
                        <th>(Now) <br> @DateTime.Parse(@time).DayOfWeek.ToString().Substring(0, 3) </th>
                    }            
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Name</td>
                    <td>@forecast.DistanceTo.ToString()</td> 
                    @foreach (var weathCode in forecast.DailyData.WeatherCodeList)
                    {
                        <td> <img src=@GetImageSourcePath(weathCode)></td>
                    }
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<ForecastDTO> forecasts;
    private int range;
    private GeolocationPosition? position;
    private string SearchQuery { get; set; } = string.Empty;
    private List<NominatimResult> Suggestions { get; set; } = new();
    private string SelectedAddress { get; set; } = string.Empty;
    private string Latitude { get; set; }
    private string Longitude { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await _geolocationService.GetCurrentPositionAsync(OnSuccess, OnError);
    }

    private string GetImageSourcePath(int weatherCode)
    {   
        string weatherCodeFolderPath = Path.Combine("wwwroot", "WeatherIcons");
        var weatherCodeFiles = Directory.GetFiles(weatherCodeFolderPath).ToList();
        var matchedFile = weatherCodeFiles.Where(weatherCodeFiles => weatherCodeFiles.Contains("\\" + weatherCode.ToString() + "_")).Single().Substring(21);

        return $"WeatherIcons/{matchedFile}";
    }

    private async Task GetTrailWeather()
    {                
        try
        {            
            forecasts = await _caller.GetTrailWeather(range, position.Coords.Latitude, position.Coords.Longitude);
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine(ex.Message);
            forecasts = new List<ForecastDTO>();
        }
    }

    private async Task HandleKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")        
            await GetTrailWeather();
    }

    private async Task ManualSearch_HandleKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        { 
            
            if (!string.IsNullOrWhiteSpace(SearchQuery) && SearchQuery.Length > 1)
            {
                Suggestions = await FetchAutocompleteResults(SearchQuery);
            }
            else
            {
                Suggestions.Clear();
            }
        }
    }

    private async Task<List<NominatimResult>> FetchAutocompleteResults(string query)
    {
        var url = $"https://nominatim.openstreetmap.org/search?format=json&q={Uri.EscapeDataString(query)}";
        // return await Http.GetFromJsonAsync<List<NominatimResult>>(url) ?? new();
        var result = await Http.GetAsync(url).Result.Content.ReadAsStringAsync();
        var deserializedResult = JsonSerializer.Deserialize<List<NominatimResult>>(result);
        return JsonSerializer.Deserialize<List<NominatimResult>>(result) ?? new();
    }

    private void SelectSuggestion(NominatimResult suggestion)
    {
        SelectedAddress = suggestion.display_name;
        Latitude = suggestion.lat;
        Longitude = suggestion.lon;
        SearchQuery = suggestion.display_name;
        Suggestions.Clear();
    }

    private class NominatimResult
    {
        public long PlaceId { get; set; }
        public string Licence { get; set; }
        public string OsmType { get; set; }
        public long OsmId { get; set; }
        public string lat { get; set; }
        public string lon { get; set; }
        public string Class { get; set; }
        public string Type { get; set; }
        public int PlaceRank { get; set; }
        public double Importance { get; set; }
        public string AddressType { get; set; }
        public string Name { get; set; }
        public string display_name { get; set; }
        public List<double> BoundingBox { get; set; }
    }

    [JSInvokable]
    public void OnSuccess(GeolocationPosition pos)
    {
        position = pos;
        StateHasChanged();
    }

    [JSInvokable]
    public void OnError(GeolocationPositionError error)
    {
        // Handle error
        Console.WriteLine($"Error: {error.Message}");
    }
}