@page "/"
@using trail_weather_frontend.Services
@using trail_weather_frontend.DTOs
@using trail_weather_frontend.Components
@using Timer = System.Timers.Timer
@using System.Threading
@inject IApiCaller _caller
@inject IGeolocationService _geolocationService
@inject ILocationSearchService _locationSearchService

<link href="css/weather-grid.css" rel="stylesheet" />

<h3>TrailWeather</h3>

<div class="search-container">        
    <label for="locationInput">Location:</label>
    <input type="text" id="locationInput" @bind=searchText @oninput="ManualSearch_HandleKeyUp" @onclick="ClearAndSuggest_OnClick" class="search-input" placeholder="Start typing ..."/>
    <br />
    <label for="rangeInput">Range (km):</label>
    <input type="text" id="rangeInput" @bind="@range" @onkeyup="HandleKeyUp" class="range-input">
    <button class="btn-primary" @onclick="GetTrailWeather">Get Weather</button>
</div>

@if (suggestions.Any())
{
    <ul class="list-group">
        @foreach (var suggestion in suggestions)
        {
            <li class="list-group-item" @onclick="() => SelectSuggestion(suggestion)">
                @suggestion.display_name
            </li>
        }
    </ul>
}

@if (forecasts != null)
{
    if (forecasts.Count == 0)
        return;        

    <Grid TItem="ForecastDTO"
    AllowSorting="true"
    Class="table table-hover"
    DataProvider="ForecastDataProvider"
    Responsive="true"
    @key="@forecasts">

        <GridColumns>
            <GridColumn TItem="ForecastDTO" HeaderText="BikePark Name" SortKeySelector="item => item.Name">
                <div class="bikepark-name-column">
                    <div class="truncate-text">
                        @context.Name
                        <div class="mobile-tooltip">@context.Name</div>
                    </div>
                </div>
            </GridColumn>

            <GridColumn TItem="ForecastDTO" HeaderText="Dist.(km)" SortKeySelector="item => item.DistanceTo">
                <div class="distance-column">
                    @context.DistanceTo
                </div>
            </GridColumn>
            
            @foreach (var time in forecasts[0].DailyData.TimeList)
            {
                var timeIndex = forecasts[0].DailyData.TimeList.IndexOf(time);
                <GridColumn TItem="ForecastDTO" HeaderText="@DateTime.Parse(@time).DayOfWeek.ToString().Substring(0, 3)" Sortable="false">
                    <WeatherIcon WeatherCode="@context.DailyData.WeatherCodeList[timeIndex]" />
                </GridColumn>                                   
            }
            
        </GridColumns>
    </Grid>
}

@code {
    private List<ForecastDTO> forecasts;
    private int range;        
    private List<NominatimResult> suggestions { get; set; } = new();
    private GeoCoordinateDTO selectedLocation { get; set; } = new();
    private string searchText { get; set; } = string.Empty;
    private Timer timer = new(300);
    private CancellationTokenSource _cts = new();

    private async Task<GridDataProviderResult<ForecastDTO>> ForecastDataProvider(GridDataProviderRequest<ForecastDTO> request)
    {
        return await Task.FromResult(request.ApplyTo(forecasts));
    }        

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _cts = new CancellationTokenSource();
            await _geolocationService.GetCurrentPositionAsync(
                this,
                nameof(OnSuccess),
                nameof(OnError));            
            timer.Elapsed += async (sender, e) => await FetchAutocompleteResults(searchText);             
        }            
    }

    private async Task GetTrailWeather()
    {                
        try
        {                        
            forecasts = await _caller.GetTrailWeather(range, selectedLocation.Lat, selectedLocation.Lon);
            await InvokeAsync(StateHasChanged);
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine(ex.Message);
            forecasts = new List<ForecastDTO>();
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task HandleKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")        
            await GetTrailWeather();
    }

    private void ManualSearch_HandleKeyUp(ChangeEventArgs e)
    {
        searchText = e.Value.ToString();
        suggestions.Clear();
        if (searchText.Count() > 2) 
        {
            timer.Enabled = true;
            timer.Start();
        }                                               
    }

    private void ClearAndSuggest_OnClick(MouseEventArgs e){
        searchText = string.Empty;
    }

    private async Task FetchAutocompleteResults(string query)
    {
        timer.Stop();
        suggestions = await _locationSearchService.SearchLocationsAsync(query);
        await InvokeAsync(StateHasChanged);
    }

    private void SelectSuggestion(NominatimResult suggestion)
    {        
        _cts.Cancel();
        selectedLocation.Lat = Double.Parse(suggestion.lat);
        selectedLocation.Lon = Double.Parse(suggestion.lon);
        selectedLocation.Address = suggestion.display_name;
        searchText = $"{selectedLocation.Address}";
        suggestions.Clear();        
        forecasts = new List<ForecastDTO>();
    }

    [JSInvokable]
    public async void OnSuccess(GeolocationPosition pos)
    {        
        selectedLocation.Lat = pos.Coords.Latitude;
        selectedLocation.Lon = pos.Coords.Longitude;
        var details = await _locationSearchService.GetLocationDetailsAsync(selectedLocation.Lat, selectedLocation.Lon);
        selectedLocation.Address = details.Address;
        searchText = $"{selectedLocation.Address}";
        StateHasChanged();
    }

    [JSInvokable]
    public void OnError(GeolocationPositionError error)
    {        
        Console.WriteLine($"Error: {error.Message}");
    }

    public void Dispose()
    {
        _cts?.Cancel();
        _cts?.Dispose();
    }
}